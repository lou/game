{"version":3,"sources":["keys.js","canvas.js","hero.js","collision.js","utils.js","life.js","game.js","enemies/index.js","index.js"],"names":["keysMap","UsableKeys","populateKeysMap","includes","event","code","type","canvas","document","getElementById","ctx","getContext","heroDefault","speed","width","height","x","y","hit","opacity","hero","moveHero","Math","max","min","opacityDirection","drawHero","fillStyle","fillRect","resetHero","collision","r","h","xin","yin","random","lifeDefault","collided","life","moveLife","lifes","drawLife","generateLife","resetLife","statusBar","lifesCount","gameStatus","stageCount","gameDefault","stage","paused","over","game","previousGame","drawStatusBar","innerHTML","innerText","reset","gameOver","updateLevel","enemiesCount","enemies","generateEnemies","Array","keys","map","_","hitHero","enemy","setTimeout","moveEnemies","forEach","index","removeEnemyNotShown","drawEnemies","length","splice","resetEnemies","draw","clearRect","update","requestAnimationFrame","start","pause","togglePause","addEventListener","focus","window"],"mappings":"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","file":"src.4803dfa5.map","sourceRoot":"../src","sourcesContent":["export let keysMap = {}\n\nconst UsableKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Space']\n\nexport const populateKeysMap = () => {\n  if (UsableKeys.includes(event.code)){\n    keysMap[event.code] = event.type == 'keydown'\n  }\n}\n","export const canvas = document.getElementById('board')\nexport const ctx = canvas.getContext(\"2d\")\n","import { canvas, ctx } from './canvas'\nimport { keysMap } from './keys'\n\nconst heroDefault = {\n  speed: 6,\n  width: 30,\n  height: 30,\n  x: canvas.width / 2 - 20,\n  y: canvas.height - 60,\n  hit: false,\n  opacity: 1\n}\n\nexport let hero = { ...heroDefault }\n\nconst moveHero = () => {\n  if (keysMap['ArrowUp']) {\n    hero.y -= hero.speed\n  }\n  if (keysMap['ArrowDown']) {\n    hero.y += hero.speed\n  }\n  if (keysMap['ArrowLeft']) {\n    hero.x -= hero.speed\n  }\n  if (keysMap['ArrowRight']){\n    hero.x += hero.speed\n  }\n  // Wall collision\n  hero.x = Math.max(Math.min(hero.x, canvas.width - hero.width), 0)\n  hero.y = Math.max(Math.min(hero.y, canvas.height - hero.height), 0)\n}\n\nlet opacityDirection = -1\n\nexport const drawHero = () => {\n  moveHero()\n  if (hero.hit) {\n    hero.opacity += opacityDirection * 0.08\n    if (hero.opacity <= 0.2) opacityDirection = 1\n    if (hero.opacity >= 1) opacityDirection = -1\n    ctx.fillStyle = `rgb(223, 147, 80, ${hero.opacity})`\n  } else {\n    hero.opacity = 1\n    ctx.fillStyle = `rgb(0, 0, 0, ${hero.opacity})`\n  }\n  ctx.fillRect(hero.x, hero.y, hero.width, hero.height)\n}\n\nexport const resetHero = () => {\n  hero = { ...heroDefault }\n}\n","export const collision = (r, h) => {\n  const xin = h.x + h.width >= r.x && h.x <= r.x + r.width\n  const yin = h.y + h.height >= r.y && h.y <= r.y + r.height\n\n  return xin && yin\n}\n","export const random = (max, min) =>\n  Math.random() * (max - min) + min\n","import { ctx, canvas } from './canvas'\nimport { hero } from './hero'\nimport { collision } from './collision'\nimport { game } from './game'\nimport { random } from './utils'\n\nexport const lifeDefault = {\n  width: 10,\n  height: 10,\n  collided: false,\n  y: -500,\n  x: 100\n}\n\nexport let life = { ...lifeDefault }\n\nconst moveLife = () => {\n  if (collision(life, hero)) {\n    game.lifes += 1\n    life.y = -100\n    life.collided = true\n  }\n  life.y += life.speed\n}\n\nexport const drawLife = () => {\n  if (!life.collided) {\n    moveLife()\n    ctx.fillStyle = 'rgb(25, 174, 97)'\n    ctx.fillRect(life.x, life.y, life.width, life.height)\n  }\n}\n\nexport const generateLife = () => {\n  if (life.y < 0 || life.y > canvas.height) {\n    life.x = random(10, canvas.width - 20)\n    life.y = random(-200, -800)\n    life.speed = random(1, 3)\n    life.collided = false\n  }\n}\n\nexport const resetLife = () => {\n  life = { ...lifeDefault }\n}\n","import { resetLife, generateLife } from './life'\nimport { resetHero } from './hero'\nimport { resetEnemies, generateEnemies } from './enemies'\n\n\nexport const statusBar = document.getElementById('status-bar')\nconst lifesCount = document.getElementById('lifes')\nconst gameStatus = document.getElementById('game-status')\nconst stageCount = document.getElementById('stage')\n\nexport const gameDefault = {\n  lifes: 1,\n  stage: 0,\n  paused: true,\n  over: false\n}\n\nexport let game = { ...gameDefault }\n\nlet previousGame = {\n  lifes: null,\n  stage: null,\n  paused: null\n}\n\nexport const drawStatusBar = () => {\n  if (game.lifes !== previousGame.lifes) {\n    lifesCount.innerHTML = `♥ ${game.lifes}`\n    previousGame.lifes = game.lifes\n  }\n  if (game.paused !== previousGame.paused) {\n    gameStatus.innerHTML = `${game.paused ? '&#10074;&#10074;' : '▶'}`\n    previousGame.paused = game.paused\n  }\n  if (game.stage !== previousGame.stage) {\n    stageCount.innerText = `Stage ${game.stage}`\n    previousGame.stage = game.stage\n  }\n}\n\nexport const reset = () => {\n  resetHero()\n  resetLife()\n  resetEnemies()\n  game = { ...gameDefault }\n\n}\n\nexport const gameOver = () => {\n  game.paused = true\n  game.over = true\n}\n\nexport const updateLevel = () => {\n  game.stage += 1\n  generateLife()\n  generateEnemies()\n}\n","import { ctx, canvas } from '../canvas'\nimport { hero } from '../hero'\nimport { collision } from '../collision'\nimport { game, updateLevel } from '../game'\nimport { random } from '../utils'\n\nconst enemiesCount = 50\nlet enemies = []\n\nexport const generateEnemies = () => {\n  enemies = [\n    ...enemies,\n    ...[...Array(enemiesCount + game.stage).keys()].map(_ => ({\n      speed: random(0.1, Math.min(1 + game.stage, hero.speed - 1)),\n      width: 30,\n      height: 30,\n      x: random(-20, canvas.width - 20),\n      y: random(-1000, -30)\n    }))\n  ]\n}\n\nconst hitHero = (enemy) => {\n  if (!hero.hit && collision(enemy, hero)) {\n    hero.hit = true\n    game.lifes -= 1\n    setTimeout(() => {\n      hero.hit = false\n    }, 2000)\n  }\n}\n\nconst moveEnemies = () => {\n  enemies.forEach((enemy, index) => {\n    removeEnemyNotShown(enemy, index)\n    hitHero(enemy)\n    enemy.y += enemy.speed\n  })\n}\n\nexport const drawEnemies = () => {\n  if (enemies.length <= 50) updateLevel()\n  moveEnemies()\n  enemies.forEach(enemy => {\n    ctx.fillStyle = `rgb(165, 77, 105)`\n    ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height)\n  })\n}\n\nconst removeEnemyNotShown = (enemy, index) => {\n  if (enemy.y > canvas.height) {\n    enemies.splice(index, 1)\n  }\n}\n\nexport const resetEnemies = () => {\n  enemies = []\n}\n","import { populateKeysMap, keysMap } from './keys'\nimport { canvas, ctx } from './canvas'\nimport { drawEnemies } from './enemies'\nimport { drawLife } from './life'\nimport { drawHero } from './hero'\nimport { drawStatusBar, game, gameOver, reset } from './game'\n\nconst draw = () => {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  drawEnemies()\n  drawLife()\n  drawHero()\n  drawStatusBar()\n}\n\nconst update = () => {\n  setTimeout(() => {\n    if (game.over && keysMap['Space']) reset()\n    draw()\n    if (game.lifes === 0) gameOver()\n    if (!game.paused) requestAnimationFrame(update)\n  }, 1000 / 60)\n}\n\nconst start = () => {\n  game.paused = false\n  update()\n}\n\nconst pause = () => {\n  game.paused = true\n  update()\n}\n\nconst togglePause = () => {\n  game.paused ? start() : pause()\n}\n\ncanvas.addEventListener('click', () => {\n  canvas.focus()\n})\n\ncanvas.addEventListener('focus', () => {\n  start()\n})\n\ncanvas.addEventListener('blur', () => {\n  pause()\n})\n\nwindow.addEventListener('keydown', () => {\n  if (event.code === 'Space') togglePause()\n  populateKeysMap()\n})\n\nwindow.addEventListener('keyup', () => {\n  populateKeysMap()\n})\n"]}
{"version":3,"sources":["keys.js","canvas.js","collision.js","ship.js","utils.js","life.js","game.js","enemies/index.js","index.js"],"names":["keysMap","UsableKeys","populateKeysMap","includes","event","code","type","canvas","document","getElementById","ctx","getContext","collision","r","h","xin","x","width","yin","y","height","shipDefault","speed","hit","opacity","ship","move","Math","max","min","munitions","defaultMunition","power","drawMunitions","forEach","munition","index","removeMunitionNotShown","fillStyle","fillRect","splice","shoot","push","opacityDirection","handleCollisions","drawShip","resetShip","random","lifeDefault","collided","life","moveLife","lifes","drawLife","font","fillText","generateLife","resetLife","statusBar","lifesCount","stageCount","score","gameDefault","stage","paused","over","game","previousGame","drawStatusBar","innerHTML","innerText","toLocaleString","reset","gameOver","updateLevel","enemiesCount","enemies","generateEnemies","Array","keys","map","_","armor","points","shotDown","hitShip","enemy","setTimeout","hitByMunition","indexEnemies","indexMunitions","moveEnemies","removeEnemyNotShown","drawEnemies","length","resetEnemies","gameStatus","draw","clearRect","handleGameStatus","update","requestAnimationFrame","style","display","start","pause","togglePause","addEventListener","focus","window"],"mappings":"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","file":"src.f21c0226.map","sourceRoot":"../src","sourcesContent":["export let keysMap = {}\n\nconst UsableKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', 'Space']\n\nexport const populateKeysMap = () => {\n  if (UsableKeys.includes(event.code)){\n    keysMap[event.code] = event.type == 'keydown'\n  }\n}\n","export const canvas = document.getElementById('board')\nexport const ctx = canvas.getContext(\"2d\")\n","export const collision = (r, h) => {\n  const xin = h.x + h.width >= r.x && h.x <= r.x + r.width\n  const yin = h.y + h.height >= r.y && h.y <= r.y + r.height\n\n  return xin && yin\n}\n","import { canvas, ctx } from './canvas'\nimport { keysMap } from './keys'\nimport { collision } from './collision'\n\nconst shipDefault = {\n  speed: 6,\n  width: 30,\n  height: 30,\n  x: canvas.width / 2 - 20,\n  y: canvas.height - 60,\n  hit: false,\n  opacity: 1\n}\n\nexport let ship = { ...shipDefault }\n\nconst move = () => {\n  if (keysMap['ArrowUp']) {\n    ship.y -= ship.speed\n  }\n  if (keysMap['ArrowDown']) {\n    ship.y += ship.speed\n  }\n  if (keysMap['ArrowLeft']) {\n    ship.x -= ship.speed\n  }\n  if (keysMap['ArrowRight']){\n    ship.x += ship.speed\n  }\n  // Wall collision\n  ship.x = Math.max(Math.min(ship.x, canvas.width - ship.width), 0)\n  ship.y = Math.max(Math.min(ship.y, canvas.height - ship.height), 0)\n}\n\n\nexport let munitions = []\nconst defaultMunition = {\n  width: 3,\n  height: 3,\n  speed: -10,\n  power: 1\n}\n\nconst drawMunitions = () => {\n  munitions.forEach((munition, index) => {\n    removeMunitionNotShown(munition, index)\n    munition.y += munition.speed\n    ctx.fillStyle = `rgb(0, 0, 0)`\n    ctx.fillRect(munition.x, munition.y, munition.width, munition.height)\n  })\n}\n\nconst removeMunitionNotShown = (munition, index) => {\n  if (munition.y <= 0) {\n    munitions.splice(index, 1)\n  }\n}\n\nconst shoot = () => {\n  if (keysMap['Space']) {\n    munitions.push({\n      ...defaultMunition,\n      x: ship.x + ship.width / 2 - 2,\n      y: ship.y\n    })\n  }\n}\n\nlet opacityDirection = -1\n\nconst handleCollisions = () => {\n  if (ship.hit) {\n    ship.opacity += opacityDirection * 0.08\n    if (ship.opacity <= 0.2) opacityDirection = 1\n    if (ship.opacity >= 1) opacityDirection = -1\n  } else {\n    ship.opacity = 1\n  }\n}\n\n\nexport const drawShip = () => {\n  move()\n  shoot()\n  drawMunitions()\n  handleCollisions()\n  ctx.fillStyle = `rgb(0, 0, 0, ${ship.opacity})`\n  ctx.fillRect(ship.x, ship.y, ship.width, ship.height)\n}\n\nexport const resetShip = () => {\n  ship = { ...shipDefault }\n}\n","export const random = (max, min) =>\n  Math.random() * (max - min) + min\n","import { ctx, canvas } from './canvas'\nimport { ship } from './ship'\nimport { collision } from './collision'\nimport { game } from './game'\nimport { random } from './utils'\n\nexport const lifeDefault = {\n  width: 16,\n  height: 16,\n  collided: false,\n  y: 50,\n  x: 200,\n  speed: 0.5\n}\n\nexport let life = { ...lifeDefault }\n\nconst moveLife = () => {\n  if (collision(life, ship)) {\n    game.lifes += 1\n    life.y = -100\n    life.collided = true\n  }\n  life.y += life.speed\n}\n\nexport const drawLife = () => {\n  if (!life.collided) {\n    moveLife()\n    ctx.fillStyle = 'black'\n    ctx.fillRect(life.x, life.y, life.width, life.height)\n    ctx.font = '8px sans-serif';\n    ctx.fillStyle = 'white';\n    ctx.fillText(\"♥\", life.x + 4, life.y + 11)\n  }\n}\n\nexport const generateLife = () => {\n  if (life.y < 0 || life.y > canvas.height) {\n    life.x = random(10, canvas.width - 20)\n    life.y = random(-200, -800)\n    life.speed = random(1, 3)\n    life.collided = false\n  }\n}\n\nexport const resetLife = () => {\n  life = { ...lifeDefault }\n}\n","import { resetLife, generateLife } from './life'\nimport { resetShip } from './ship'\nimport { resetEnemies, generateEnemies } from './enemies'\n\n\nexport const statusBar = document.getElementById('status-bar')\nconst lifesCount = document.getElementById('lifes')\nconst stageCount = document.getElementById('stage')\nconst score = document.getElementById('score')\n\nexport const gameDefault = {\n  lifes: 1,\n  stage: 0,\n  paused: true,\n  over: false,\n  score: 0\n}\n\nexport let game = { ...gameDefault }\n\nlet previousGame = {\n  lifes: null,\n  stage: null,\n  score: null\n}\n\nexport const drawStatusBar = () => {\n  if (game.lifes !== previousGame.lifes) {\n    lifesCount.innerHTML = `♥ ${game.lifes}`\n    previousGame.lifes = game.lifes\n  }\n  if (game.stage !== previousGame.stage) {\n    stageCount.innerText = `Stage ${game.stage}`\n    previousGame.stage = game.stage\n  }\n  if (game.score !== previousGame.score) {\n    score.innerText = game.score.toLocaleString()\n    previousGame.score = game.score\n  }\n}\n\nexport const reset = () => {\n  resetShip()\n  resetLife()\n  resetEnemies()\n  game = { ...gameDefault, paused: false }\n\n}\n\nexport const gameOver = () => {\n  game.paused = true\n  game.over = true\n}\n\nexport const updateLevel = () => {\n  game.stage += 1\n  generateLife()\n  generateEnemies()\n}\n","import { ctx, canvas } from '../canvas'\nimport { ship, munitions } from '../ship'\nimport { collision } from '../collision'\nimport { game, updateLevel } from '../game'\nimport { random } from '../utils'\n\nconst enemiesCount = 30\nlet enemies = []\n\nexport const generateEnemies = () => {\n  enemies = [\n    ...enemies,\n    ...[...Array(enemiesCount + game.stage).keys()].map(_ => ({\n      speed: random(0.1, Math.min(1 + game.stage, ship.speed - 1)),\n      width: 20,\n      height: 20,\n      armor: 10,\n      points: {\n        hit: 1,\n        shotDown: 10,\n      },\n      x: random(0, canvas.width - 20),\n      y: random(-1000, -30)\n    }))\n  ]\n}\n\nconst hitShip = (enemy) => {\n  if (!ship.hit && collision(enemy, ship)) {\n    ship.hit = true\n    game.lifes -= 1\n    setTimeout(() => {\n      ship.hit = false\n    }, 2000)\n  }\n}\n\nconst hitByMunition = (enemy, indexEnemies) => {\n  munitions.forEach((munition, indexMunitions) => {\n    if (collision(enemy, munition)) {\n      enemy.armor -= munition.power\n      game.score += enemy.points.hit\n      if (enemy.armor <= 0) {\n        game.score += enemy.points.shotDown\n        enemies.splice(indexEnemies, 1)\n      }\n      munitions.splice(indexMunitions, 1)\n    }\n  })\n}\n\nconst moveEnemies = () => {\n  enemies.forEach((enemy, index) => {\n    removeEnemyNotShown(enemy, index)\n    hitShip(enemy)\n    hitByMunition(enemy, index)\n    enemy.y += enemy.speed\n  })\n}\n\nexport const drawEnemies = () => {\n  if (enemies.length <= enemiesCount) updateLevel()\n  moveEnemies()\n  enemies.forEach(enemy => {\n    ctx.fillStyle = `rgb(50, 50, 50)`\n    ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height)\n  })\n}\n\nconst removeEnemyNotShown = (enemy, index) => {\n  if (enemy.y > canvas.height) {\n    enemies.splice(index, 1)\n  }\n}\n\nexport const resetEnemies = () => {\n  enemies = []\n}\n","import { populateKeysMap, keysMap } from './keys'\nimport { canvas, ctx } from './canvas'\nimport { drawEnemies } from './enemies'\nimport { drawLife } from './life'\nimport { drawShip } from './ship'\nimport { drawStatusBar, game, gameOver, reset } from './game'\n\nconst gameStatus = document.getElementById('game-status')\n\nconst draw = () => {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  drawEnemies()\n  drawLife()\n  drawShip()\n  drawStatusBar()\n  handleGameStatus()\n\n}\n\nconst update = () => {\n  setTimeout(() => {\n    if (game.over && keysMap['Enter']) reset()\n    if (game.lifes === 0) gameOver()\n    draw()\n    if (!game.paused) requestAnimationFrame(update)\n  }, 1000 / 60)\n}\n\nconst handleGameStatus = () => {\n  if (game.paused) {\n    gameStatus.style.display = 'block'\n    if (game.over) {\n      gameStatus.innerHTML = `\n        GAME OVER\n        <br />\n        Press Enter to Restart\n      `\n    } else {\n      gameStatus.innerHTML = `\n        &#10074;&#10074; Paused\n        <br />\n        Press Enter to resume\n      `\n    }\n  } else {\n    gameStatus.style.display = 'none'\n  }\n}\n\nconst start = () => {\n  game.paused = false\n  update()\n}\n\nconst pause = () => {\n  game.paused = true\n  update()\n}\n\nconst togglePause = () => {\n  game.paused ? start() : pause()\n}\n\ncanvas.addEventListener('click', () => {\n  canvas.focus()\n})\n\ncanvas.addEventListener('focus', () => {\n  if (game.paused) start()\n})\n\ncanvas.addEventListener('blur', () => {\n  if (!game.paused) pause()\n})\n\nwindow.addEventListener('keydown', () => {\n  if (event.code === 'Enter') togglePause()\n  populateKeysMap()\n})\n\nwindow.addEventListener('keyup', () => {\n  populateKeysMap()\n})\n"]}